{
  "ID": "410977d4-4b00-4415-b475-b02a09c78c8f",
  "Root": {
    "id": "410977d4-4b00-4415-b475-b02a09c78c8f",
    "alive": true,
    "content": [
      "ebd2229d-3e51-4cec-b4d9-8d5588e8b211",
      "ade8b82b-9b68-4c24-a5f8-ce446905232c",
      "8b150e49-c373-40f0-ab1f-62b2f4557a54",
      "a052864b-f49a-48f3-bd30-ffadcb4ecaac",
      "85623327-96f8-4b5c-9db0-b57c9fbb4c5f",
      "42f099dc-9e66-4000-a04d-d4fb2f4b5863",
      "97b3c455-1e76-4b80-b2f3-7aca97821db5",
      "14ae703f-08d5-4b02-a4d9-afa086293c5c",
      "80c10fa4-755e-4e4b-a64e-a58d13d70154",
      "77a49c43-df21-4ff7-8ab4-b213da64b8ac",
      "9ff66b68-b209-4f82-9069-52bbc231e6b6",
      "55c17e03-1949-4166-a0c8-6eae17d9ba86",
      "8f826d5b-1406-48f1-a0b4-0a89a7d1ade4",
      "1ee675b6-42e2-4eb9-884c-384e543b879d",
      "d101dcf4-ee41-4de1-bc58-6497aeef71b5",
      "264aef18-ea74-471e-8b42-d2eabb94d620",
      "39fdbbba-01de-46d2-aac7-0ba9874993eb",
      "b8e7bd50-567b-42db-ae53-25e609530714",
      "7f175102-e174-4849-8e18-d08277e814a9",
      "c992fbfc-1c83-4bd8-b941-3131737cd442",
      "9db71fec-6120-40da-91ec-9df1ebbee08f",
      "e9378483-9b10-47c1-814d-e61677dcf428",
      "f11442d2-8441-44e6-9bda-6d85c28d8724",
      "4cfc3a14-afb6-4496-ae20-c8c33604ac24",
      "2e9712f5-d9d9-42ca-b6c2-a270b11cad86",
      "dcec6ec7-b139-4aae-b4a5-49720deedcb8",
      "90291a7f-263e-4d95-a3e6-4853e53d4de6",
      "6077f4bf-3f5f-47ca-9ccb-d6985c853957",
      "5a55124b-7cfd-480f-873f-31c1b351c047",
      "8ece25db-16ee-44fb-9a29-f5a99cab337a",
      "e4b20162-80cc-4369-84ae-0a823c132d3a",
      "5b2fc0b9-ede2-4093-9e4f-ecfb4e0cd4c9"
    ],
    "copied_from": "76631d76-ce90-41b8-ba26-0c5ca553e421",
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1558210470970,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1558213140000,
    "parent_id": "03ece883-f7df-4ce7-8596-73d04811479e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "5/17/2019, Fast File Finder 1.2.4 and optimizing memory usage in Go"
        ]
      ]
    },
    "type": "page",
    "version": 181,
    "content_resolved": [
      {
        "id": "ebd2229d-3e51-4cec-b4d9-8d5588e8b211",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558210500000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558210800000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "I released version 1.2.4 of "
            ],
            [
              "Fast File Finder",
              [
                [
                  "a",
                  "https://blog.kowalczyk.info/software/fast-file-finder-for-windows/"
                ]
              ]
            ],
            [
              ", a program to quickly find files by name on Windows."
            ]
          ]
        },
        "type": "text",
        "version": 113,
        "inline_content": [
          {
            "Text": "I released version 1.2.4 of "
          },
          {
            "Text": "Fast File Finder",
            "Link": "https://blog.kowalczyk.info/software/fast-file-finder-for-windows/"
          },
          {
            "Text": ", a program to quickly find files by name on Windows."
          }
        ]
      },
      {
        "id": "ade8b82b-9b68-4c24-a5f8-ce446905232c",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558210500000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558210500000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are 2 lessons here."
            ]
          ]
        },
        "type": "text",
        "version": 34,
        "inline_content": [
          {
            "Text": "There are 2 lessons here."
          }
        ]
      },
      {
        "id": "8b150e49-c373-40f0-ab1f-62b2f4557a54",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558210500000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558210560000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lesson 1: if you use the software you write, you'll be more likely to improve it."
            ]
          ]
        },
        "type": "text",
        "version": 190,
        "inline_content": [
          {
            "Text": "Lesson 1: if you use the software you write, you'll be more likely to improve it."
          }
        ]
      },
      {
        "id": "a052864b-f49a-48f3-bd30-ffadcb4ecaac",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558210560000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558210680000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It all started with me using latest version and it crashing without a trace. If it happened to the user and reported to me, I would be stuck. There's nothing to go on: the program just seemingly vanished."
            ]
          ]
        },
        "type": "text",
        "version": 269,
        "inline_content": [
          {
            "Text": "It all started with me using latest version and it crashing without a trace. If it happened to the user and reported to me, I would be stuck. There's nothing to go on: the program just seemingly vanished."
          }
        ]
      },
      {
        "id": "85623327-96f8-4b5c-9db0-b57c9fbb4c5f",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558210680000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558210740000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "My theory was that a goroutine crashed and took the program down with it."
            ]
          ]
        },
        "type": "text",
        "version": 165,
        "inline_content": [
          {
            "Text": "My theory was that a goroutine crashed and took the program down with it."
          }
        ]
      },
      {
        "id": "42f099dc-9e66-4000-a04d-d4fb2f4b5863",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558210740000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558210800000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "I only have few of those so I've added a way to catch crashes in goroutine so that they get logged and don't bring down the program."
            ]
          ]
        },
        "type": "text",
        "version": 211,
        "inline_content": [
          {
            "Text": "I only have few of those so I've added a way to catch crashes in goroutine so that they get logged and don't bring down the program."
          }
        ]
      },
      {
        "id": "97b3c455-1e76-4b80-b2f3-7aca97821db5",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558210980000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558210980000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It's useful functionality but it wasn't the problem."
            ]
          ]
        },
        "type": "text",
        "version": 119,
        "inline_content": [
          {
            "Text": "It's useful functionality but it wasn't the problem."
          }
        ]
      },
      {
        "id": "14ae703f-08d5-4b02-a4d9-afa086293c5c",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558210860000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558210980000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "I got a small hint in that 64-bit version was working fine while 32-bit version wasn't. "
            ]
          ]
        },
        "type": "text",
        "version": 289,
        "inline_content": [
          {
            "Text": "I got a small hint in that 64-bit version was working fine while 32-bit version wasn't. "
          }
        ]
      },
      {
        "id": "80c10fa4-755e-4e4b-a64e-a58d13d70154",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558210980000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558211100000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "I then ran the program under WinDBG debugger hoping to catch the crash. WinDBG is not a good debugger for Go programs because it only understands .pdb symbols, while Go only produces DWARF symbols, but Go's native debugger "
            ],
            [
              "delve",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " only supports 64 bit programs, and 64-bit version didn't crash."
            ]
          ]
        },
        "type": "text",
        "version": 365,
        "inline_content": [
          {
            "Text": "I then ran the program under WinDBG debugger hoping to catch the crash. WinDBG is not a good debugger for Go programs because it only understands .pdb symbols, while Go only produces DWARF symbols, but Go's native debugger "
          },
          {
            "Text": "delve",
            "AttrFlags": 2
          },
          {
            "Text": " only supports 64 bit programs, and 64-bit version didn't crash."
          }
        ]
      },
      {
        "id": "77a49c43-df21-4ff7-8ab4-b213da64b8ac",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558211100000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558211160000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unfortunately the program didn't crash. It looked like it exited without getting into a crash state."
            ]
          ]
        },
        "type": "text",
        "version": 170,
        "inline_content": [
          {
            "Text": "Unfortunately the program didn't crash. It looked like it exited without getting into a crash state."
          }
        ]
      },
      {
        "id": "9ff66b68-b209-4f82-9069-52bbc231e6b6",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558210980000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558211220000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "My next theory was that it was related to running out of memory so I ran it and just observed memory usage in Task Manager."
            ]
          ]
        },
        "type": "text",
        "version": 110,
        "inline_content": [
          {
            "Text": "My next theory was that it was related to running out of memory so I ran it and just observed memory usage in Task Manager."
          }
        ]
      },
      {
        "id": "55c17e03-1949-4166-a0c8-6eae17d9ba86",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558211220000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558211400000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bingo: the used space quickly grew to almost 1 GB. It's not necessarily amount of physically used memory but given that 32-bit processes have access to only 2 GB of memory / virtual space, it's not surprising that a managed runtime like Go's has issues after reserving 2 GB."
            ]
          ]
        },
        "type": "text",
        "version": 404,
        "inline_content": [
          {
            "Text": "Bingo: the used space quickly grew to almost 1 GB. It's not necessarily amount of physically used memory but given that 32-bit processes have access to only 2 GB of memory / virtual space, it's not surprising that a managed runtime like Go's has issues after reserving 2 GB."
          }
        ]
      },
      {
        "id": "8f826d5b-1406-48f1-a0b4-0a89a7d1ade4",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558211400000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558211460000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Fast File Finder works by building an in-memory index. The thing is: the index was only around 200 MB, far from 1 GB."
            ]
          ]
        },
        "type": "text",
        "version": 152,
        "inline_content": [
          {
            "Text": "Fast File Finder works by building an in-memory index. The thing is: the index was only around 200 MB, far from 1 GB."
          }
        ]
      },
      {
        "id": "1ee675b6-42e2-4eb9-884c-384e543b879d",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558211460000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558211580000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To understand why 200 MB of data can gobble much more real memory requires understanding Go slices and how they grow."
            ]
          ]
        },
        "type": "text",
        "version": 156,
        "inline_content": [
          {
            "Text": "To understand why 200 MB of data can gobble much more real memory requires understanding Go slices and how they grow."
          }
        ]
      },
      {
        "id": "d101dcf4-ee41-4de1-bc58-6497aeef71b5",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558211580000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558211880000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The index was stored as a single "
            ],
            [
              "[]byte",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " slice. It's a more compact and GC-friendly way of storing a list of directories and files than a naive way of using a string for each directory and file. For example, a string overhead is at a minimum 2 machine words (one for a pointer to string data and one for string length). That's 2 x 8 = 16 bytes per string on 64-bit machine. Add overhead of allocating each string separately and overhead of scanning those strings during GC cycles."
            ]
          ]
        },
        "type": "text",
        "version": 682,
        "inline_content": [
          {
            "Text": "The index was stored as a single "
          },
          {
            "Text": "[]byte",
            "AttrFlags": 2
          },
          {
            "Text": " slice. It's a more compact and GC-friendly way of storing a list of directories and files than a naive way of using a string for each directory and file. For example, a string overhead is at a minimum 2 machine words (one for a pointer to string data and one for string length). That's 2 x 8 = 16 bytes per string on 64-bit machine. Add overhead of allocating each string separately and overhead of scanning those strings during GC cycles."
          }
        ]
      },
      {
        "id": "264aef18-ea74-471e-8b42-d2eabb94d620",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558211880000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558212060000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Index building process scans a hard-drive, accumulates up to 1 MB of data and appends this data to the index. So it looks like this:"
            ]
          ]
        },
        "type": "text",
        "version": 243,
        "inline_content": [
          {
            "Text": "Index building process scans a hard-drive, accumulates up to 1 MB of data and appends this data to the index. So it looks like this:"
          }
        ]
      },
      {
        "id": "39fdbbba-01de-46d2-aac7-0ba9874993eb",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558211995349,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558212660000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "var index []byte\nvar indexChunk []byte\nfor {\n\tindexChunk = scanNextDriveChunk()\n  index = append(index, indexChunk...)\n}"
            ]
          ]
        },
        "type": "code",
        "version": 195,
        "code": "var index []byte\nvar indexChunk []byte\nfor {\n\tindexChunk = scanNextDriveChunk()\n  index = append(index, indexChunk...)\n}",
        "code_language": "Go"
      },
      {
        "id": "b8e7bd50-567b-42db-ae53-25e609530714",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558210500000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558212180000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here lies the issue: when we append to index, Go runtime has to expand "
            ],
            [
              "index",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " slice which means we need to allocate memory for new, bigger slice, copy data from existing slice, append new data, free the old slice. This memory copying is expensive."
            ]
          ]
        },
        "type": "text",
        "version": 385,
        "inline_content": [
          {
            "Text": "Here lies the issue: when we append to index, Go runtime has to expand "
          },
          {
            "Text": "index",
            "AttrFlags": 2
          },
          {
            "Text": " slice which means we need to allocate memory for new, bigger slice, copy data from existing slice, append new data, free the old slice. This memory copying is expensive."
          }
        ]
      },
      {
        "id": "7f175102-e174-4849-8e18-d08277e814a9",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558212180000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558212360000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Go runtime is smart about it: to avoid this expensive re-allocation on every append, it allocates more than strictly necessary for new slice. As a rule of thumb think of it as doubling the size of the slice."
            ]
          ]
        },
        "type": "text",
        "version": 373,
        "inline_content": [
          {
            "Text": "Go runtime is smart about it: to avoid this expensive re-allocation on every append, it allocates more than strictly necessary for new slice. As a rule of thumb think of it as doubling the size of the slice."
          }
        ]
      },
      {
        "id": "c992fbfc-1c83-4bd8-b941-3131737cd442",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558212300000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558212420000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "That's a good system but it does have a trade-off: the bigger the slice, the more memory you're (potentially) wasting."
            ]
          ]
        },
        "type": "text",
        "version": 195,
        "inline_content": [
          {
            "Text": "That's a good system but it does have a trade-off: the bigger the slice, the more memory you're (potentially) wasting."
          }
        ]
      },
      {
        "id": "9db71fec-6120-40da-91ec-9df1ebbee08f",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558212420000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558212480000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Imagine the slice is 128 kB in size and you append 1 kB of data. Go will double the size of the slice to 256 kB and you'll be wasting 127 kB of memory at that point."
            ]
          ]
        },
        "type": "text",
        "version": 237,
        "inline_content": [
          {
            "Text": "Imagine the slice is 128 kB in size and you append 1 kB of data. Go will double the size of the slice to 256 kB and you'll be wasting 127 kB of memory at that point."
          }
        ]
      },
      {
        "id": "e9378483-9b10-47c1-814d-e61677dcf428",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558212480000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558212600000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In my case, expanding by 1 MB to 200 MB would have allocated much more than 200 MB."
            ]
          ]
        },
        "type": "text",
        "version": 146,
        "inline_content": [
          {
            "Text": "In my case, expanding by 1 MB to 200 MB would have allocated much more than 200 MB."
          }
        ]
      },
      {
        "id": "f11442d2-8441-44e6-9bda-6d85c28d8724",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558212600000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558212600000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The solution was relatively easy: the index became a slice of 1 MB chunks:"
            ]
          ]
        },
        "type": "text",
        "version": 118,
        "inline_content": [
          {
            "Text": "The solution was relatively easy: the index became a slice of 1 MB chunks:"
          }
        ]
      },
      {
        "id": "4cfc3a14-afb6-4496-ae20-c8c33604ac24",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558212661332,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558212660000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "var index [][]byte\nvar indexChunk []byte\nfor {\n\tindexChunk = scanNextDriveChunk()\n  index = append(index, indexChunk)\n}"
            ]
          ]
        },
        "type": "code",
        "version": 132,
        "code": "var index [][]byte\nvar indexChunk []byte\nfor {\n\tindexChunk = scanNextDriveChunk()\n  index = append(index, indexChunk)\n}",
        "code_language": "Go"
      },
      {
        "id": "2e9712f5-d9d9-42ca-b6c2-a270b11cad86",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558212420000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558212720000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "I had to rewrite the scan and search code but it wasn't hard."
            ]
          ]
        },
        "type": "text",
        "version": 92,
        "inline_content": [
          {
            "Text": "I had to rewrite the scan and search code but it wasn't hard."
          }
        ]
      },
      {
        "id": "dcec6ec7-b139-4aae-b4a5-49720deedcb8",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558212720000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558212780000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "After the change even the 32 bit version could scan my drive."
            ]
          ]
        },
        "type": "text",
        "version": 77,
        "inline_content": [
          {
            "Text": "After the change even the 32 bit version could scan my drive."
          }
        ]
      },
      {
        "id": "90291a7f-263e-4d95-a3e6-4853e53d4de6",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558212780000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558212840000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unfortunately, this isn't 100% fix. The reason the program worked before and stopped working recently was that I have more files on my hard-drive now."
            ]
          ]
        },
        "type": "text",
        "version": 211,
        "inline_content": [
          {
            "Text": "Unfortunately, this isn't 100% fix. The reason the program worked before and stopped working recently was that I have more files on my hard-drive now."
          }
        ]
      },
      {
        "id": "6077f4bf-3f5f-47ca-9ccb-d6985c853957",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558212840000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558212840000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "I'm sure that people have hard-drives with enough files to go over the limit of a 32-bit process."
            ]
          ]
        },
        "type": "text",
        "version": 99,
        "inline_content": [
          {
            "Text": "I'm sure that people have hard-drives with enough files to go over the limit of a 32-bit process."
          }
        ]
      },
      {
        "id": "5a55124b-7cfd-480f-873f-31c1b351c047",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558212840000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558213080000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One way to mitigate this would be to ship 64-bit version. I avoided that because some people might still have 32-bit OS version, but I probably should stop caring because I think it's a very small number."
            ]
          ]
        },
        "type": "text",
        "version": 242,
        "inline_content": [
          {
            "Text": "One way to mitigate this would be to ship 64-bit version. I avoided that because some people might still have 32-bit OS version, but I probably should stop caring because I think it's a very small number."
          }
        ]
      },
      {
        "id": "8ece25db-16ee-44fb-9a29-f5a99cab337a",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558213080000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558213080000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For really large indexes the solution would be to store the index on disk. The search would be slower but truly limitless."
            ]
          ]
        },
        "type": "text",
        "version": 126,
        "inline_content": [
          {
            "Text": "For really large indexes the solution would be to store the index on disk. The search would be slower but truly limitless."
          }
        ]
      },
      {
        "id": "e4b20162-80cc-4369-84ae-0a823c132d3a",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558213080000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558213140000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A hybrid solution would work too: up to certain size, keep the index in memory. Over that size, use disk."
            ]
          ]
        },
        "type": "text",
        "version": 123,
        "inline_content": [
          {
            "Text": "A hybrid solution would work too: up to certain size, keep the index in memory. Over that size, use disk."
          }
        ]
      },
      {
        "id": "5b2fc0b9-ede2-4093-9e4f-ecfb4e0cd4c9",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1558213140000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1558213140000,
        "parent_id": "410977d4-4b00-4415-b475-b02a09c78c8f",
        "parent_table": "block",
        "type": "text",
        "version": 4
      }
    ],
    "title": "5/17/2019, Fast File Finder 1.2.4 and optimizing memory usage in Go",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 138
    }
  ],
  "Tables": null
}